/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { COUNTER_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const MARK_USER_VISIT_DISCRIMINATOR = new Uint8Array([
  235, 35, 156, 205, 98, 48, 131, 180,
]);

export function getMarkUserVisitDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    MARK_USER_VISIT_DISCRIMINATOR
  );
}

export type MarkUserVisitInstruction<
  TProgram extends string = typeof COUNTER_PROGRAM_ADDRESS,
  TAccountUser extends string | AccountMeta<string> = string,
  TAccountCounter extends string | AccountMeta<string> = string,
  TAccountUserVisit extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountUser extends string
        ? WritableSignerAccount<TAccountUser> & AccountSignerMeta<TAccountUser>
        : TAccountUser,
      TAccountCounter extends string
        ? WritableAccount<TAccountCounter>
        : TAccountCounter,
      TAccountUserVisit extends string
        ? WritableAccount<TAccountUserVisit>
        : TAccountUserVisit,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type MarkUserVisitInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type MarkUserVisitInstructionDataArgs = {};

export function getMarkUserVisitInstructionDataEncoder(): FixedSizeEncoder<MarkUserVisitInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: MARK_USER_VISIT_DISCRIMINATOR })
  );
}

export function getMarkUserVisitInstructionDataDecoder(): FixedSizeDecoder<MarkUserVisitInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getMarkUserVisitInstructionDataCodec(): FixedSizeCodec<
  MarkUserVisitInstructionDataArgs,
  MarkUserVisitInstructionData
> {
  return combineCodec(
    getMarkUserVisitInstructionDataEncoder(),
    getMarkUserVisitInstructionDataDecoder()
  );
}

export type MarkUserVisitAsyncInput<
  TAccountUser extends string = string,
  TAccountCounter extends string = string,
  TAccountUserVisit extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The wallet address of the user recording their visit
   * Must be a signer to prove ownership and prevent spoofing
   */
  user: TransactionSigner<TAccountUser>;
  /**
   * The global counter account that tracks total unique visits
   *
   * # PDA Verification
   * - Seeds: `["counter"]`
   * - Must exist (created by initialize instruction)
   * - Bump verified against stored value for security
   */
  counter?: Address<TAccountCounter>;
  /**
   * The user-specific visit tracking account
   *
   * # PDA Details
   * - Seeds: `["user_visit", user_pubkey]`
   * - Created per user to track their visit status
   * - `init_if_needed` allows first-time creation but reuses existing accounts
   * - Prevents duplicate visits from same wallet
   */
  userVisit?: Address<TAccountUserVisit>;
  /**
   * The Solana System Program
   * Required for creating new user visit accounts
   */
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getMarkUserVisitInstructionAsync<
  TAccountUser extends string,
  TAccountCounter extends string,
  TAccountUserVisit extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof COUNTER_PROGRAM_ADDRESS,
>(
  input: MarkUserVisitAsyncInput<
    TAccountUser,
    TAccountCounter,
    TAccountUserVisit,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  MarkUserVisitInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountCounter,
    TAccountUserVisit,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? COUNTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    counter: { value: input.counter ?? null, isWritable: true },
    userVisit: { value: input.userVisit ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.counter.value) {
    accounts.counter.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 111, 117, 110, 116, 101, 114])
        ),
      ],
    });
  }
  if (!accounts.userVisit.value) {
    accounts.userVisit.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([117, 115, 101, 114, 95, 118, 105, 115, 105, 116])
        ),
        getAddressEncoder().encode(expectAddress(accounts.user.value)),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.counter),
      getAccountMeta(accounts.userVisit),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getMarkUserVisitInstructionDataEncoder().encode({}),
    programAddress,
  } as MarkUserVisitInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountCounter,
    TAccountUserVisit,
    TAccountSystemProgram
  >);
}

export type MarkUserVisitInput<
  TAccountUser extends string = string,
  TAccountCounter extends string = string,
  TAccountUserVisit extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The wallet address of the user recording their visit
   * Must be a signer to prove ownership and prevent spoofing
   */
  user: TransactionSigner<TAccountUser>;
  /**
   * The global counter account that tracks total unique visits
   *
   * # PDA Verification
   * - Seeds: `["counter"]`
   * - Must exist (created by initialize instruction)
   * - Bump verified against stored value for security
   */
  counter: Address<TAccountCounter>;
  /**
   * The user-specific visit tracking account
   *
   * # PDA Details
   * - Seeds: `["user_visit", user_pubkey]`
   * - Created per user to track their visit status
   * - `init_if_needed` allows first-time creation but reuses existing accounts
   * - Prevents duplicate visits from same wallet
   */
  userVisit: Address<TAccountUserVisit>;
  /**
   * The Solana System Program
   * Required for creating new user visit accounts
   */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getMarkUserVisitInstruction<
  TAccountUser extends string,
  TAccountCounter extends string,
  TAccountUserVisit extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof COUNTER_PROGRAM_ADDRESS,
>(
  input: MarkUserVisitInput<
    TAccountUser,
    TAccountCounter,
    TAccountUserVisit,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): MarkUserVisitInstruction<
  TProgramAddress,
  TAccountUser,
  TAccountCounter,
  TAccountUserVisit,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? COUNTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    user: { value: input.user ?? null, isWritable: true },
    counter: { value: input.counter ?? null, isWritable: true },
    userVisit: { value: input.userVisit ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.user),
      getAccountMeta(accounts.counter),
      getAccountMeta(accounts.userVisit),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getMarkUserVisitInstructionDataEncoder().encode({}),
    programAddress,
  } as MarkUserVisitInstruction<
    TProgramAddress,
    TAccountUser,
    TAccountCounter,
    TAccountUserVisit,
    TAccountSystemProgram
  >);
}

export type ParsedMarkUserVisitInstruction<
  TProgram extends string = typeof COUNTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The wallet address of the user recording their visit
     * Must be a signer to prove ownership and prevent spoofing
     */
    user: TAccountMetas[0];
    /**
     * The global counter account that tracks total unique visits
     *
     * # PDA Verification
     * - Seeds: `["counter"]`
     * - Must exist (created by initialize instruction)
     * - Bump verified against stored value for security
     */
    counter: TAccountMetas[1];
    /**
     * The user-specific visit tracking account
     *
     * # PDA Details
     * - Seeds: `["user_visit", user_pubkey]`
     * - Created per user to track their visit status
     * - `init_if_needed` allows first-time creation but reuses existing accounts
     * - Prevents duplicate visits from same wallet
     */
    userVisit: TAccountMetas[2];
    /**
     * The Solana System Program
     * Required for creating new user visit accounts
     */
    systemProgram: TAccountMetas[3];
  };
  data: MarkUserVisitInstructionData;
};

export function parseMarkUserVisitInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedMarkUserVisitInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 4) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      user: getNextAccount(),
      counter: getNextAccount(),
      userVisit: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getMarkUserVisitInstructionDataDecoder().decode(instruction.data),
  };
}
