/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { COUNTER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const INITIALIZE_COUNTER_DISCRIMINATOR = new Uint8Array([
  67, 89, 100, 87, 231, 172, 35, 124,
]);

export function getInitializeCounterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    INITIALIZE_COUNTER_DISCRIMINATOR
  );
}

export type InitializeCounterInstruction<
  TProgram extends string = typeof COUNTER_PROGRAM_ADDRESS,
  TAccountPayer extends string | AccountMeta<string> = string,
  TAccountCounter extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountPayer extends string
        ? WritableSignerAccount<TAccountPayer> &
            AccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountCounter extends string
        ? WritableAccount<TAccountCounter>
        : TAccountCounter,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type InitializeCounterInstructionData = {
  discriminator: ReadonlyUint8Array;
};

export type InitializeCounterInstructionDataArgs = {};

export function getInitializeCounterInstructionDataEncoder(): FixedSizeEncoder<InitializeCounterInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: INITIALIZE_COUNTER_DISCRIMINATOR })
  );
}

export function getInitializeCounterInstructionDataDecoder(): FixedSizeDecoder<InitializeCounterInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getInitializeCounterInstructionDataCodec(): FixedSizeCodec<
  InitializeCounterInstructionDataArgs,
  InitializeCounterInstructionData
> {
  return combineCodec(
    getInitializeCounterInstructionDataEncoder(),
    getInitializeCounterInstructionDataDecoder()
  );
}

export type InitializeCounterAsyncInput<
  TAccountPayer extends string = string,
  TAccountCounter extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The account that will pay for creating the counter account
   * Must be a signer to authorize the transaction
   */
  payer: TransactionSigner<TAccountPayer>;
  /**
   * The global counter account that will store the total visit count
   *
   * # PDA Details
   * - Seeds: `["counter"]`
   * - Created with `init` constraint (fails if account already exists)
   * - Bump seed stored in the account for future reference
   * - Space allocated: 8 (discriminator) + Counter::INIT_SPACE
   */
  counter?: Address<TAccountCounter>;
  /**
   * The Solana System Program
   * Required for creating new accounts on the blockchain
   */
  systemProgram?: Address<TAccountSystemProgram>;
};

export async function getInitializeCounterInstructionAsync<
  TAccountPayer extends string,
  TAccountCounter extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof COUNTER_PROGRAM_ADDRESS,
>(
  input: InitializeCounterAsyncInput<
    TAccountPayer,
    TAccountCounter,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  InitializeCounterInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCounter,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? COUNTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    counter: { value: input.counter ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.counter.value) {
    accounts.counter.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(
          new Uint8Array([99, 111, 117, 110, 116, 101, 114])
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.counter),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeCounterInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeCounterInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCounter,
    TAccountSystemProgram
  >);
}

export type InitializeCounterInput<
  TAccountPayer extends string = string,
  TAccountCounter extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  /**
   * The account that will pay for creating the counter account
   * Must be a signer to authorize the transaction
   */
  payer: TransactionSigner<TAccountPayer>;
  /**
   * The global counter account that will store the total visit count
   *
   * # PDA Details
   * - Seeds: `["counter"]`
   * - Created with `init` constraint (fails if account already exists)
   * - Bump seed stored in the account for future reference
   * - Space allocated: 8 (discriminator) + Counter::INIT_SPACE
   */
  counter: Address<TAccountCounter>;
  /**
   * The Solana System Program
   * Required for creating new accounts on the blockchain
   */
  systemProgram?: Address<TAccountSystemProgram>;
};

export function getInitializeCounterInstruction<
  TAccountPayer extends string,
  TAccountCounter extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof COUNTER_PROGRAM_ADDRESS,
>(
  input: InitializeCounterInput<
    TAccountPayer,
    TAccountCounter,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): InitializeCounterInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountCounter,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? COUNTER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: true },
    counter: { value: input.counter ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.counter),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getInitializeCounterInstructionDataEncoder().encode({}),
    programAddress,
  } as InitializeCounterInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountCounter,
    TAccountSystemProgram
  >);
}

export type ParsedInitializeCounterInstruction<
  TProgram extends string = typeof COUNTER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * The account that will pay for creating the counter account
     * Must be a signer to authorize the transaction
     */
    payer: TAccountMetas[0];
    /**
     * The global counter account that will store the total visit count
     *
     * # PDA Details
     * - Seeds: `["counter"]`
     * - Created with `init` constraint (fails if account already exists)
     * - Bump seed stored in the account for future reference
     * - Space allocated: 8 (discriminator) + Counter::INIT_SPACE
     */
    counter: TAccountMetas[1];
    /**
     * The Solana System Program
     * Required for creating new accounts on the blockchain
     */
    systemProgram: TAccountMetas[2];
  };
  data: InitializeCounterInstructionData;
};

export function parseInitializeCounterInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedInitializeCounterInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      counter: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getInitializeCounterInstructionDataDecoder().decode(instruction.data),
  };
}
