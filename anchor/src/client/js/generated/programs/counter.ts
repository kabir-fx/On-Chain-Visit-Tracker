/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedInitializeInstruction,
  type ParsedVisitInstruction,
} from '../instructions';

export const COUNTER_PROGRAM_ADDRESS =
  '4iTkCvhwbbYUvobnobkFN3LkDRiZm1yZoCtvTD2wsKnG' as Address<'4iTkCvhwbbYUvobnobkFN3LkDRiZm1yZoCtvTD2wsKnG'>;

export enum CounterAccount {
  Counter,
  UserVisit,
}

export function identifyCounterAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CounterAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([255, 176, 4, 245, 188, 253, 124, 25])
      ),
      0
    )
  ) {
    return CounterAccount.Counter;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([228, 199, 36, 45, 194, 225, 235, 88])
      ),
      0
    )
  ) {
    return CounterAccount.UserVisit;
  }
  throw new Error(
    'The provided account could not be identified as a counter account.'
  );
}

export enum CounterInstruction {
  Initialize,
  Visit,
}

export function identifyCounterInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): CounterInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([175, 175, 109, 31, 13, 152, 155, 237])
      ),
      0
    )
  ) {
    return CounterInstruction.Initialize;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([255, 207, 102, 71, 80, 6, 133, 112])
      ),
      0
    )
  ) {
    return CounterInstruction.Visit;
  }
  throw new Error(
    'The provided instruction could not be identified as a counter instruction.'
  );
}

export type ParsedCounterInstruction<
  TProgram extends string = '4iTkCvhwbbYUvobnobkFN3LkDRiZm1yZoCtvTD2wsKnG',
> =
  | ({
      instructionType: CounterInstruction.Initialize;
    } & ParsedInitializeInstruction<TProgram>)
  | ({
      instructionType: CounterInstruction.Visit;
    } & ParsedVisitInstruction<TProgram>);
