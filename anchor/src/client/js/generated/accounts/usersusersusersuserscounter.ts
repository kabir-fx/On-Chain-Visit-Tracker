/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const USERSUSERSUSERSUSERSCOUNTER_DISCRIMINATOR = new Uint8Array([
  90, 78, 160, 206, 106, 30, 6, 253,
]);

export function getUsersusersusersuserscounterDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    USERSUSERSUSERSUSERSCOUNTER_DISCRIMINATOR
  );
}

export type Usersusersusersuserscounter = {
  discriminator: ReadonlyUint8Array;
  count: number;
};

export type UsersusersusersuserscounterArgs = { count: number };

export function getUsersusersusersuserscounterEncoder(): FixedSizeEncoder<UsersusersusersuserscounterArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['count', getU8Encoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: USERSUSERSUSERSUSERSCOUNTER_DISCRIMINATOR,
    })
  );
}

export function getUsersusersusersuserscounterDecoder(): FixedSizeDecoder<Usersusersusersuserscounter> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['count', getU8Decoder()],
  ]);
}

export function getUsersusersusersuserscounterCodec(): FixedSizeCodec<
  UsersusersusersuserscounterArgs,
  Usersusersusersuserscounter
> {
  return combineCodec(
    getUsersusersusersuserscounterEncoder(),
    getUsersusersusersuserscounterDecoder()
  );
}

export function decodeUsersusersusersuserscounter<
  TAddress extends string = string,
>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Usersusersusersuserscounter, TAddress>;
export function decodeUsersusersusersuserscounter<
  TAddress extends string = string,
>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Usersusersusersuserscounter, TAddress>;
export function decodeUsersusersusersuserscounter<
  TAddress extends string = string,
>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
):
  | Account<Usersusersusersuserscounter, TAddress>
  | MaybeAccount<Usersusersusersuserscounter, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUsersusersusersuserscounterDecoder()
  );
}

export async function fetchUsersusersusersuserscounter<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Usersusersusersuserscounter, TAddress>> {
  const maybeAccount = await fetchMaybeUsersusersusersuserscounter(
    rpc,
    address,
    config
  );
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUsersusersusersuserscounter<
  TAddress extends string = string,
>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Usersusersusersuserscounter, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUsersusersusersuserscounter(maybeAccount);
}

export async function fetchAllUsersusersusersuserscounter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Usersusersusersuserscounter>[]> {
  const maybeAccounts = await fetchAllMaybeUsersusersusersuserscounter(
    rpc,
    addresses,
    config
  );
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUsersusersusersuserscounter(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Usersusersusersuserscounter>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) =>
    decodeUsersusersusersuserscounter(maybeAccount)
  );
}

export function getUsersusersusersuserscounterSize(): number {
  return 9;
}
