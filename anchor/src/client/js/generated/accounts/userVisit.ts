/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBooleanDecoder,
  getBooleanEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU8Decoder,
  getU8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type EncodedAccount,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const USER_VISIT_DISCRIMINATOR = new Uint8Array([
  228, 199, 36, 45, 194, 225, 235, 88,
]);

export function getUserVisitDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(USER_VISIT_DISCRIMINATOR);
}

export type UserVisit = {
  discriminator: ReadonlyUint8Array;
  /**
   * The wallet address of the user
   * Stored for verification and potential analytics
   */
  user: Address;
  /**
   * Boolean flag indicating if this user has visited
   * Once set to true, cannot be changed (prevents duplicates)
   */
  hasVisited: boolean;
  /**
   * Bump seed for this user's PDA
   * Allows deterministic address creation using this user's tracking account
   */
  bump: number;
};

export type UserVisitArgs = {
  /**
   * The wallet address of the user
   * Stored for verification and potential analytics
   */
  user: Address;
  /**
   * Boolean flag indicating if this user has visited
   * Once set to true, cannot be changed (prevents duplicates)
   */
  hasVisited: boolean;
  /**
   * Bump seed for this user's PDA
   * Allows deterministic address creation using this user's tracking account
   */
  bump: number;
};

export function getUserVisitEncoder(): FixedSizeEncoder<UserVisitArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['user', getAddressEncoder()],
      ['hasVisited', getBooleanEncoder()],
      ['bump', getU8Encoder()],
    ]),
    (value) => ({ ...value, discriminator: USER_VISIT_DISCRIMINATOR })
  );
}

export function getUserVisitDecoder(): FixedSizeDecoder<UserVisit> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['user', getAddressDecoder()],
    ['hasVisited', getBooleanDecoder()],
    ['bump', getU8Decoder()],
  ]);
}

export function getUserVisitCodec(): FixedSizeCodec<UserVisitArgs, UserVisit> {
  return combineCodec(getUserVisitEncoder(), getUserVisitDecoder());
}

export function decodeUserVisit<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<UserVisit, TAddress>;
export function decodeUserVisit<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<UserVisit, TAddress>;
export function decodeUserVisit<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<UserVisit, TAddress> | MaybeAccount<UserVisit, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getUserVisitDecoder()
  );
}

export async function fetchUserVisit<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<UserVisit, TAddress>> {
  const maybeAccount = await fetchMaybeUserVisit(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeUserVisit<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<UserVisit, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeUserVisit(maybeAccount);
}

export async function fetchAllUserVisit(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<UserVisit>[]> {
  const maybeAccounts = await fetchAllMaybeUserVisit(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeUserVisit(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<UserVisit>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeUserVisit(maybeAccount));
}

export function getUserVisitSize(): number {
  return 42;
}
